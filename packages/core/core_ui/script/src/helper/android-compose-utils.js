const capitalize = (str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

const camelize = s => s.replace(/-./g, x => x[1].toUpperCase())

const titleCase = (str) => camelize(str.replace(/\b\S/g, t => t.toUpperCase()))

const generateSpace = (depth) => {
    return ' '.repeat(4 * depth)
}

const createKotlinClassFile = (className, generateData, type = 'object', imports = '') => {
    let data = `
//
//  ${className}.kt
//  ${className}
//
//  DO NOT directly modify this file. It's generate automatically somewhere else
//
//  Generated by ai.nattapol on ${new Date().toLocaleDateString("th-TH")} BE.
//  Copyright (c) Bitkub Online co.,ltd. All rights reserved.
//\n\n`
    data += `\n${imports}\n`
    data += `\n@Suppress("unused")\n`
    if (type == `data class`) {
        data += `${type} ${className} (\n`
        data += generateData
        data += ')'
    } else {
        data += `${type} ${className} {\n`
        data += generateData
        data += '}'
    }

    return data
}

const createVariableName = (key, mark) => {
    let name = '';
    mark = mark != null ? mark : ''
    if (key.startsWith(mark)) {
        name += camelize(key);
    } else {
        name += camelize(mark) + titleCase(key);
    }
    return removeSymbol(name);
}

const removeSymbol = (str) => {
    return str.replace('-', '')
        .replace('-', '')
        .replace('{', '')
        .replace('}', '')
        .replace(' ', '');
}


const createStructFooter = (mark, space) => {
    let data = ''
    if (mark) {
        data += `${space}\n\n`
    }
    return data
}

const createAndroidComment = (file) => {
    const path = file.destination.split('/')
    return `
    <!--
    ${path[path.length - 1]}
    
    DO NOT directly modify this file. It's generate automatically somewhere else
    
    Generated by ai.nattapol on ${new Date().toLocaleDateString("th-TH")} BE.
    Copyright (c) Bitkub Online co.,ltd. All rights reserved.
-->\n\n`
}

if (typeof String.prototype.replaceAll === "undefined") {
    String.prototype.replaceAll = function (match, replace) {
        return this.replace(new RegExp(match, 'g'), () => replace);
    }
}

const cleanInit = (text) => {
    return text.replaceAll(/\s+override init\(\)\{\n\s+super.init\(\)\n\{\{INSTANCE\}\}\n\s+\}/, '')
}

module.exports = {
    capitalize,
    camelize,
    titleCase,
    removeSymbol,
    generateSpace,
    createStructFooter,
    createKotlinClassFile,
    createAndroidComment,
    createVariableName,
    cleanInit
}
